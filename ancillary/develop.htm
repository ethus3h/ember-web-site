<h1>Development documentation</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/">Home</a></span>
    <span><a href="/ancillary/ready-to-use.htm">Other projects</a></span>
    <span><a href="/ancillary/work-in-progress.htm">Work-in-progress ancillary projects</a></span>
</p>

<h2>Ember development community standards</h2>

    <p>Ember has adopted <a href="code-of-conduct.htm">the Contributor Covenant Code of Conduct</a>.</p>

<h2>Issue tracker</h2>

    <p>An issue tracker is not available as of 8 October 2019.</p>

<h2>List of repositories</h2><!-- MAINTENANCE: Keep this list in sync with repositories.lst in ember-shared. Eventually, this data could maybe be stored in and generated from that, or something, although more structured data would be needed to do that and it might be more trouble than it is worth. -->
    <p>Note (2019 Jan. 26a27): The ember-web-site, wreathe-conf, and ember-web-site-snapshots repositories have not been publicly available for a while (leaked some possibly sensitive information in them). I've finally gotten around to doing something about it, though, by cleaning and then dropping the history from the repositories, and force pushing over the current ones. I'll set them back to public once the Git hosts do garbage collection. The versions of the repositories from before the force pushes are included in ember-library-2 to preserve the history. (I was too lazy to be selective in cleaning them up such that a sanitized copy of the repos' old commit history could stay public; this was much easier, sorry.) Anyway, that's why they've disappeared â€” sorry for the silence, procrastination strikes again... :P Update 2019 Apr. 9: It's necessary to re-do this, since it turns out GitHub at least doesn't do GC, or at least it hasn't yet (procedure: back up current repo, rename current remote repo, create new blank remote repo, remove old history from local copy (https://stackoverflow.com/questions/41953300/how-to-delete-the-old-git-history), push to remote, unbreak GitLab mirror by moving and then creating a new blank project and setting up mirroring for it). This is done for ember-web-site, which is now public again, yay! The other two still need it.</p>
    <p>Note (2020 Jan. 7): I'm working on restructuring the repositories to simplify things. Non-critical things will get deferred for later work on EITE and their repositories moved into ember-history. Submodules will be eliminated. No subfolders will be used; all git repositories will be top-level folders. This should make it a lot simpler. Perhaps not as conceptually sophisticated, but a lot easier to maintain and think about.</p>
    <p>Note (2020 Jan. 10): All repositories will have submodules removed from them. Submodules that are other Ember repositories will not get any special handling, while when submodules are removed that are not other Ember repositories, they will be listed in git.lst for backing up. Similarly ember-history will have submodules replaced with snapshots and listed in the table below. For now, the snapshots will go in elements staging: /elements/staging-unsynced-started-2019oct28/ember-repository-snapshots-started-2020m1d10n2.</p>
    <h3>Top-level projects</h3>
        <dl>
            <dt>ember-information-technology-environment</dt><dd><a href="/information-technology">Information technology environment</a></dd>
            <dt>ember-library</dt><dd><a href="/library">Library</a></dd>
            <dt>ember-library-2</dt><dd><a href="/library">Library</a>: Section 2 (not publicly available at this time)</dd>
            <dt>ember-web-site</dt><dd>This Web site</dd>
        </dl>
-- clean up finished down to here

    <h3>Satellite projects</h3>
        <dl>
            <dt>compiz-extra-snowflake-textures</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: textures for use with the Compiz-Reloaded window manager</dd>
            <dt>compiz-plugins-community</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Additional plugins for the Compiz-Reloaded window manager</dd>
            <dt>compiz-reloaded-overlay</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Code used to build the Compiz-Reloaded window manager</dd>
            <dt>crystallize</dt><dd><a href="/ancillary/crystallize/">Crystallize</a></dd>
            <dt>curl-phpmyadmin</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Tool to export MySQL data from PHPMyAdmin using curl</dd>
            <dt>ember-meta</dt><dd>Ember meta-repository (pulls in all other repositories as submodules)</dd>
            <dt>ember-history</dt><dd><a href="/ancillary/ember-history/">Ember History</a>: meta-repository containing repositories and data that are no longer used by Ember</dd>
            <dt>ember-shared</dt><dd>Code shared between various Ember software</dd>
            <dt>ember-web-site-snapshots</dt><dd>Snapshots of the contents of the Ember Web site, as retrieved from the server</dd>
            <dt>futuramerlin-web-toolkit</dt><dd><a href="/ancillary/futuramerlin-web-toolkit/">Futuramerlin Web Toolkit</a></dd>
            <dt>gentoo-wreathe-state</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Copy of the Gentoo Portage tree as synced by Wreathe</dd>
            <dt>gunmetal-gray</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Platformer computer game</dd>
            <dt>jdownloader</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: JDownloader (mirror of code to facilitate packaging)</dd>
            <dt>jorgan</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: JOrgan (forked from discontinued code)</dd>
            <dt>moon-1</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Moonlight (forked from discontinued code)</dd>
            <dt>node-spotify-downloader</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: node-spotify-downloader (forked from discontinued code) (not publicly available at this time)</dd>
            <dt>node-spotify-web</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: node-spotify-web (forked from discontinued code) (not publicly available at this time)</dd>
            <dt>unicode-docs</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Unicode documents (mirror to facilitate packaging)</dd>
            <dt>warcdealer</dt><dd><a href="/ancillary/warcdealer/">Warcdealer</a></dd>
            <dt>wreathe-base</dt><dd><a href="/ancillary/wreathe/">Wreathe</a> core repository</dd>
            <dt>wreathe-backgrounds</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: background images</dd>
            <dt>wreathe-bootstrap</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: background images</dd>
            <dt>wreathe-charselect</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Character selection tool (forked from kcharselect)</dd>
            <dt>wreathe-conf</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Configuration files</dd>
            <dt>wreathe-file-manager</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: File manager (forked from discontinued code)</dd>
            <dt>wreathe-icons</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Icons</dd>
            <dt>wreathe-media-resources</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Resources for media production</dd>
            <dt>wreathe-office-resources</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Resources for office work</dd>
            <dt>wreathe-overlay</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Code used to build some packages in Wreathe</dd>
            <dt>wreathe-overlays-redist</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Redistributed code used to build some packages in Wreathe</dd>
            <dt>wreathe-package-db</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Package information database (not exactly part of Wreathe; rather, this is information <em>regarding</em> Wreathe)</dd>
            <dt>wreathe-packages</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Packages (forked from discontinued code)</dd>
            <dt>wreathe-typeface-family</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Typefaces used in Wreathe</dd>
            <dt>wreathe-typefaces-redist</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Redistributed typefaces used in Wreathe</dd>
            <dt>wreathe-web-filters</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Web filters</dd>
            <dt>xulrunner</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: XULRunner (forked from discontinued code)</dd>
        </dl>

    <h3>Marked as historical and snapshots stored in ember-history in 2020 (WIP)</h3>
        <p></p>
        <dl>
            <dt>BeHeMMOth</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: bullet hell MMO computer game (not publicly available at this time)</dd>
            <dt>BeHeMMOth-related-submodules</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: Repositories related to BeHeMMOth, as submodules, for reference (not publicly available at this time)</dd>
            <dt>ember</dt><dd>Core project repository (pulls in all other core repositories as submodules)</dd>
            <dt>ember-web-site-wordpress</dt><dd>(previously an ember-history submodule)</dd>
            <dt>rubberfs</dt><dd>(previously an ember-history submodule)</dd>
            <dt>internetarchive</dt><dd>(previously an ember-history submodule)</dd>
            <dt>app-configs</dt><dd>(previously an ember-history submodule)</dd>
            <dt>arcmaj3</dt><dd>(previously an ember-history submodule)</dd>
            <dt>arcmaj3-client</dt><dd>(previously an ember-history submodule)</dd>
            <dt>ember-old-moved-2016apr24a25</dt><dd>(previously an ember-history submodule)</dd>
            <dt>ember-repositories</dt><dd>(previously an ember-history submodule)</dd>
            <dt>ember-retired-repositories-old-renamed-2017feb07</dt><dd>(previously an ember-history submodule)</dd>
            <dt>wreathe-old-renamed-2017feb07 (modules not yet checked needs github login)</dt><dd>(previously an ember-history submodule)</dd>
            <dt>wreathe-kernel</dt><dd>(previously an ember-history submodule)</dd>
            <dt>crystal-metadata</dt><dd>(previously an ember-history submodule)</dd>
            <dt>MailKit-meta</dt><dd>(previously an ember-history submodule)</dd>
            <dt>node-spotify-downloader-</dt><dd>(previously an ember-history submodule)</dd>
            <dt>node-spotify-web-</dt><dd>(previously an ember-history submodule)</dd>
            <dt>futuramerlin-record-label</dt><dd>(previously an ember-history submodule)</dd>
            <dt>ember-satellite-projects</dt><dd>Satellite projects meta-repository (pulls in all other satellite repositories as submodules)</dd>
            <dt>compiz-cgit-modules</dt><dd><a href="/ancillary/wreathe/">Wreathe</a>: textures for use with the Compiz-Reloaded window manager</dd>

        </dl>

    <h3>Miscellaneous repositories</h3>
        <p>These two repositories hold a record of the status of copies of the Ember project data. As of this writing, neither copy is complete ("elegiac" is a small test copy of a subset of the data used for testing the software during development, and "remote" has not finished the initial process of getting a copy). (The git repositories are held separately with a copy in the computer used for development and a copy at GitHub, and the other data are held at the Internet Archive. Eventually, there should be various mirrors with the entirety of the Ember project data.)</p>
        <dl>
            <dt>cb-status-elegiac</dt><dd>Status data: "elegiac" Ember Project copy</dd>
            <dt>cb-status-elements</dt><dd>Status data: "elements" Ember Project copy</dd>
            <dt>cb-status-remote</dt><dd>Status of the "remote" Ember Project copy</dd>
        </dl>
        <p>These repositories are personal scratch spaces used by <a href="/people/elli">Elli Chandler</a>. They are not officially part of Ember, but may at times contain some information of relevance to the development history of Ember. They may in the future be added to parts 2 or 3 of the Ember Library.</p>
        <dl>
            <dt>personal</dt><dd>Personal scratch space</dd>
            <dt>personal-private</dt><dd>Personal scratch space (not publicly available at this time)</dd>
        </dl>

<h2>Getting the data</h2>
    <p>This section discusses how to download the data of, and the projects maintained by, Ember. These instructions will result in the creation of a development environment for the repositories similar to the one used by Ember. If you want to use the Ember tools for working with this environment, and are not using Wreathe 7.3, then additional configuration steps should be taken after getting the data (see "Configuring the environment"). If you just want to examine the contents, or use standard Git tools with it, those steps are not necessary. If you are using Wreathe 7.3, these commands for getting the development data should either be run in the root directory, or else the existing <code>/Ember Library</code> folder should be moved to the desired loctaion, and the value of the <code>EmberLibrary</code> configuration field for Crystallize set to that new location as described in the "Configuring the environment" section below.</p>

    <p>It is important to check the information in the "Working with Stream Registry repositories, and crystal backups" if you are concerned that you may not be getting all the data you want.</p>

    <h3>Getting only the basic repositories</h3>
        <p>Unless you are working on Wreathe or investigating the history of Ember, you probably don't need the Wreathe repositories or Ember history repositories, which are pretty big. This section does not discuss getting them. If you do want them, see the next section. To get these basic repositories, run the following command in the directory where you want the Ember development data to be stored.</p>

        <pre><code>declare -a emberProjects=("ember" "ember-information-technology-environment" "ember-library" "ember-web-site"); declare -a emberSatelliteProjects=("crystallize" "ember-shared" "futuramerlin-web-toolkit" "warcdealer"); set -e; mkdir -p Ember\ Library; cd Ember\ Library || exit 1; git clone --recursive https://github.com/ethus3h/ember.git Ember; cd Ember || exit 1; for i in "${emberProjects[@]}"; do git clone --recursive https://github.com/ethus3h/"$i".git; done; cd ..; mkdir Ember\ satellite\ projects; cd Ember\ satellite\ projects || exit 1; for i in "${emberSatelliteProjects[@]}"; do git clone --recursive https://github.com/ethus3h/"$i".git; done; cd ../.. || exit 1; echo "Finished downloading Ember."</code></pre><br />

    <h3>Getting all public repositories</h3>
        <p>This section discusses getting all publicly available Ember data, which is quite large. Unless you are working on Wreathe or investigating the history of Ember, you probably don't need this, and can use the previous section to get a more limited subset of data.</p>
        <p>These main instructions do not currently get the ember-library-2, personal, or personal-private repositories, the first and third because they are not currently publicly available, and the second (and third) because they are probably of limited interest. To get this more complete set of repositories, run the following command in the directory where you want the Ember development data to be stored.</p>
        <pre><code>git clone --recursive https://github.com/ethus3h/ember-meta.git Ember\ Library</code></pre><br />

        <h4>About the "ember-library-2" repository</h4>
            <p>The "ember-library-2" repository is not currently publicly available, and is weird and complicated. It is an overlay on top of the ember-meta repository. To use it, clone it and then move its .git directory to <code>Ember/ember-library/ember-library-2/.egup.git</code> (within the main <code>EmberLibrary</code> folder â€” see the section "Configuring the environment" below). From a semantic perspective, the ember-meta repository should be considered part of the ember-library-2 repository, but having a submodule with the same working directory as the current git repository is kinda weird and confusing and I'm not really sure how to do it, so I haven't done that yet.</p>

        <h4>Getting the "personal" repository (and about the "personal-private" repository)</h4>
            <p>If you really do want this, go to the folder where you ran the above command, and run: <code>cd Ember\ Library/Ember\ satellite\ projects; git clone https://github.com/ethus3h/personal.git</code>. (The "personal-private" repository works in the same manner as this, but is not currently publicly available.)</p>

    <h3>Configuring and using the environment</h3>
        <p>This step is only needed if you want to use the Ember tools to work with the development environment, and are not using Wreathe 7.3 (which has this already taken care of). If you just want to examine its contents or develop it using standard Git tools, this is not necessary.</p>
        <p>To use these tools (egup/eogup), a copy of Crystallize must be installed and configured with the <code>EmberLibrary</code> configuration field set to the location of the folder (called "Ember Library") containing the development environment. For example, if as in the Ember setup the folder is in the root directory, the Crystallize configuration file (crystallize.conf) would contain a line reading '<code>EmberLibrary,/Ember Library</code>'. Also, the scripts with names beginning with "egup" and "eogup" that are in the <code>usr/bin</code> folder of the wreathe-base repository must be executable and available in the <code>PATH</code> for your user and the root user on your system.</p>
        <p>To synchronise your changes to the development environment, run <code>egup</code>, or <code>eogup</code> if there isn't a Web connection available or GitHub is unavailable, if you have remote commit privileges. (If you do not have remote commit privileges, use a fork of the repository you want to work on, in the traditional Git manner.) To build the Ember Web site, run <code>egup-web</code>.</p>

    <h3>Working with Stream Registry repositories, and crystal backups</h3>
        <p>Five of the repositories (ember-library-2, ember-history, personal, personal-private, and wreathe-packages) contain contents stored using the stream registry feature of Crystallize. This method of storing data keeps pointers to the files in the Git repositories, and stores the actual file contents elsewhere (currently only the Internet Archive; additional mirrors should be added for redundancy). A copy of those file contents is necessary to be able to access the data referenced by those pointers. This means that to obtain a complete copy of these repositories, a list of the addresses of the data (the crystal addresses) that the pointers depend on must be generated from the pointers, and then those crystals must be copied locally. In addition, there are two other sources of data stored at the Internet Archive that may be desired. First, the ember-library-2 repository contains a folder <code>.rubberfs/history</code> that contains a set of files that reference incremental snapshots of the filesystem used for Ember development. These incremental snapshots are ZFS replication streams that can be used by sending them back into an empty ZFS filesystem. They are stored as crystals, and can be added to the set of crystal addresses to be backed up locally if desired. Second, the ember-web-site repostiory contains a folder <code>people/elli/music</code> that contains files with names ending in <code>.conf</code> describing various musical works released by Elli (only tangentially related to Ember, but described here for completeness). Some of those files contain lines beginning with "<code>ia,</code>". The part of those lines after that prefix is an Internet Archive identifier for an item containing the files of the item described in that <code>.conf</code> file. Because crystal addresses are a subset of Internet Archive identifiers, and the tools for managing Crystallize backups should work with all Internet Archive items as a general rule, these identifiers can be added to the list of crystal addresses to be backed up as well, if desired.<!-- FIXME: Getting a list of all these remaining crystal identifiers/IA addresses and backing them up should be an automatable/automated process. --></p>

<h2>Relevant how-to articles</h2>
    <ul>
        <li><a href="/ancillary/wreathe/documentation/experimental/get-clean-git-branch.htm">How to get a clean, up-to-date with master branch in a forked git repository</a></li>
        <li><a href="/ancillary/wreathe/documentation/experimental/find-non-source-files.htm">Finding non-source files (e.g. in a git repository)</a></li>
        <li><a href="/ancillary/wreathe/documentation/experimental/installing-offline.htm">Installing or updating a live package without an Internet connection</a></li>
    </ul>
<!--
<p>Setting up suggested settings and mirroring between GitLab and GitHub (coming from GitHub) â€” Outdated, and can't get both pull and push mirroring working</p>
<ul>
    <li>In GitHub, go to the repository page.</li>
    <li>Check if Projects, Issues, and Wiki are empty (tutorial content when clicking on tab).</li>
    <li>Click Settings</li>
    <li>If they were empty, under "Features" uncheck "Wikis", "Issues", and "Projects".</li>
    <li>Under "Merge Button", uncheck "Allow squash merging" and "Allow rebase merging".</li>
    <li>Click "Branches" in the left column.</li>
    <li>Click "Choose a branch", click "master", check "Protect this branch", check "Include administrators", and click "Save changes". GitHub part is done now.</li>
    <li>In GitLab, go to the project page.</li>
    <li>Click (or hover if it works) Settings, then click Repository.</li>
    <li>Scroll down to "Protected Branches".</li>
    <li>In that section (you probably will have to expand it using a button on the right) click "Select branch or create wildcard", and type "*" (without the quotation marks).</li>
    <li>Click "Create wildcard *".</li>
    <li>For the two boxes reading "Select", choose "Developers + Maintainers".</li>
    <li>Click "Protect".</li>
    <li>In the next section, "Protected Tags", click "Select tag or create wildcard", and type "*" (again without the quotation marks).</li>
    <li>Click "Create wildcard *".</li>
    <li>Click "Select" (for the box "Allowed to create"), and choose "Developers + Maintainers".</li>
    <li>Click "Protect".</li>
    <li>Under "Pull from a remote repository", check "Mirror repository", and put in the "Git repository URL" in this form: <code>https://github.com/YourUserName/RepositoryName.git</code> (or, for a private repository: <code>https://YourUserName@github.com/YourUserName/RepositoryName.git</code>). If it is a private repository, put your personal access token in the "Password" textbox (<em>not</em> in the URL; that doesn't seem to work for pull mirroring, although it does for push mirroring). (To get a personal access token, open GitHub settings, click "Developer settings", and click "Personal access tokens", then click "Generate new token".)</li>
    <li>Click "Save changes".</li>
    <li>In the next section in the GitLab repository settings, "Push to a remote repository", check "Remote mirror repository", and put in the "Git repository URL" in this form: <code>https://YourUserName:YourPersonalAccessToken@github.com/YourUserName/RepositoryName.git</code>.</li>
    <li>Click "Save changes".</li>
    <li>Open the "General" section of "Settings" in the column on the left (it is analogous to the currently selected "Repository" link).</li>
    <li>Under "Permissions", within "Project visibility", if you want the project generally available, choose "Public".</li>
    <li>Uncheck "Issues", "Pipelines", "Container registry", "Wiki", and "Snippets".</li>
    <li>Click "Save changes".</li>
</ul>
-->
