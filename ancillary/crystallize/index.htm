<h1>Crystallize</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/ancillary/ready-to-use.htm">Software</a></span>
</p>

<h2>Overview</h2>
    <p>A collection of tools for working with files and filesystems.</p>
    <p class="hatnote">Note: There is an oddity in the version numbering: version 2.15.5.9.1 was followed immediately by version 2.15.5.9.3 (skipping 2.15.5.9.2); version 2.15.5.9.2 was then released following version 2.15.5.9.3 (and is identical to version 2.15.5.9.3 aside from the version number); normal numbering then resumed with version 2.15.5.9.4, .5, .6 etc. following version 2.15.5.9.2 (skipping version 2.15.5.9.3, as that number was already used).</p>
<h2>Documentation</h2>
    <h3>Usage</h3>
        <p>Crystallize provides the following primary user-facing command-line scripts.</p>
        <dl>
            <dt><code>crystal-search</code></dt><dd>Show the addresses of crystals that contain files (or, optionally, a maximum of one file per crystal) with path names matching the given pattern. Synopsis: <code>crystal-search [--single] [--] &lt;search-key&gt;</code></dd>
            <dt><code>crystal-view</code></dt><dd>List the contents of the given Crystal ID. Synopsis: <code>crystal-view &lt;crystal-address&gt;</code></dd>
            <dt><code>crystallize</code></dt><dd>Archives a snapshot of a file or files and removes it/them (unless <code>--keep</code> is specified), providing an address and/or a pointer file that can be used to retrieve it/them. <code>crystallize --update</code> is an alias for <code>crystallize-update</code>. Synopsis: <code>crystallize ( ([--version] | [--update]) | (([--offline] | ([--complete &lt;crystal-ID&gt;] [--backup])) [--leave-locked] [--keep] [--passphrase &lt;passphrase-to-use&gt;] [--] [--leave-pointer] &lt;file&gt;...) )</code></dd>
            <dt><code>crystallize-backup</code></dt><dd>Backs up <code>crystallize</code>d files with their associated metadata to the current directory. Synopsis: <code>crystallize-backup [--debug] [--passphrase &lt;passphrase-to-use&gt;] [--check-existing|--no-check-existing] [--here] [--no-recurse] &lt;crystal-address&gt;</code></dd>
            <dt><code>decrystallize</code></dt><dd>Retrieves files stored using <code>crystallize</code> to the current directory, given their address. Synopsis: <code>decrystallize [--offline &lt;path-to-local-crystal-directory&gt;] [--passphrase &lt;passphrase-to-use&gt;] [--lock-override|--no-lock-override] &lt;crystal-address&gt; [--here]</code></dd>
            <dt><code>decrystallize-pointer</code></dt><dd>Retrieves files stored using <code>crystallize</code> to the current directory, given a path to a pointer directory. Does not handle single-file pointers: use sreg_read_stream instead. Synopsis: <code>decrystallize-pointer [--passphrase &lt;passphrase-to-use&gt;] [--lock-override|--no-lock-override] &lt;path-to-pointer-directory&gt; [--here]</code></dd>
        </dl>
        <p>The following public-facing scripts are either used internally by the other tools and are mainly useful for writing other shell scripts, or are not thoroughly tested.</p>
        <dl>
            <dt><code>crystal-bulk-backup</code></dt><dd>Backs up <code>crystallize</code>d files in bulk with their associated metadata. Will back up the Ember Library by default. Can optionally add additional things to back up: put a file for each other sreg repo (the .sreg folder, not the root) to back up in [ConfigDir]/crystallize/cbb/sreg/, a list of Crystal IDs / IA identifiers to back up in [ConfigDir]/crystallize/cbb/crystals, and a list of other git repositories to back up in [ConfigDir]/crystallize/cbb/repos. The <code>--no-update-list</code> option skips gathering crystal identifiers to back up, using an existing list, and skips updating the git repository clones; this is for resuming an interrupted backup session extra quickly, but it's better to let it update the list normally unless you know this option is what you want. The <code>--no-commit</code> option disables calling <code>git commit</code>, to work around an issue that has been appearing on macOS where running <code>git commit</code> hangs indefinitely; this option will likely be removed when the issue is resolved, and the option should not be relied upon as available. Synopsis: <code>crystal-bulk-backup [--no-check-existing] [--no-update-list] [--no-commit]</code></dd>
            <dt><code>crystallize-editconf</code></dt><dd>Open the Ember configuration file in the default editor. This is a deprecated wrapper around <code>ember-getconf</code> from <a href="../ember-shared">ember-shared</a>. Synopsis: <code>crystallize-editconf</code></dd>
            <dt><code>crystallize-get-identifier-from-pointer</code></dt><dd>Print the crystal identifier for a crystal, given a path to a pointer (pointer directory, hashpointer, or other single-file pointer) for that crystal. Synopsis: <code>crystallize-get-identifier-from-pointer &lt;path-to-pointer&gt; [path-to-stream-registry-directory-for-pointer]</code></dd>
            <dt><code>crystallize-getconf</code></dt><dd>Retrieve a configuration value from the configuration file used by Ember tools. The value returned for the <code>WorkDirectory</code> option can be overridden by setting <code>EmberWorkdirOverride54ae685dc782437c99bc46c7a1211377</code> to a non-empty value. This is a deprecated wrapper around <code>ember-getconf</code> from <a href="../ember-shared">ember-shared</a>. Synopsis: <code>crystallize-getconf (&lt;configuration-key-name&gt;|ConfigLocation|ConfigDir|crystallizeVersion|emberSharedVersion)</code></dd>
            <dt><code>crystallize-update</code></dt><dd>Attempt to update Crystallize. Synopsis: <code>crystallize-update</code></dd>
            <dt><code>CrystallyCopy</code></dt><dd>Copy the specified source files or directories to the destination directory. Crystallizes the source files, and outputs a <code>csum</code> file for the source files to the destination directory. Synopsis: <code>CrystallyMove &lt;source-item&gt;... &lt;destination-directory&gt;</code></dd>
            <dt><code>CrystallyMove</code></dt><dd>Move the specified source files or directories to the destination directory. Crystallizes the source files, and outputs a <code>csum</code> file for the source files to the destination directory. Synopsis: <code>CrystallyMove &lt;source-item&gt;... &lt;destination-directory&gt;</code></dd>
            <dt><code>depbz</code></dt><dd>Extract files stored in the "pbz" or "pbze" formats (files come in sets of three: either a <code>Packed-*.pbz</code>, a <code>Packed-*.pdx</code>, and a <code>Packed-*.pmbz</code>, or a <code>Packed-*.pbze</code>, a <code>Packed-*.pdxe</code>, and a <code>Packed-*.pmbze</code>; the second type of set are encrypted). using the <code>pbz</code> (or <code>pbz.py</code>) programs. When extracting an encrypted pbz file, it's necessary to either provide a passphrase using the <code>--passphrase</code> command-line argument, or to have a file in your home directory called <code>.pbz</code> containing the passphrase.<!-- FIXME: Should the file have a trailing newline?? I assume so... --> The set of files to extract must be in the current directory. They will be extracted into a directory with a name beginning with "<code>depbz-</code>". That directory will be in the current directory by default, but a different directory to extract to can be specified. Synopsis: <code>depbz [--passphrase &lt;passphrase-to-use&gt;] &lt;pbz-date&gt; [&lt;destination-directory&gt;]</code></dd>
            <dt><code>dequicklify</code></dt><dd>Retrieve a file stored using <code>quickliquid</code>. Synopsis: <code>dequicklify &lt;URL&gt;</code></dd>
            <dt><code>fcache_init</code></dt><dd>Create an "fcache" cache directory: fcache is a naïve caching layer for non-changing URLs. Also supports creating "scache" and "localstorecache" cache directories if the first optional argument is given. If a cache size limit is not specified, the default for the given cache type will be used. Synopsis: <code>fcache_init [--f|--s|--localstore] &lt;directory-name&gt; [&lt;cache-size-limit-in-bytes&gt;]</code> (if the cache directory already exists, the current size limit will override the one provided as an argument)</dd>
            <dt><code>fcache_request</code></dt><dd>Get an item using the specified "fcache" cache. Synopsis: <code>fcache_request [&lt;cache-directory&gt;] &lt;URL&gt; [--lock-override|--no-lock-override]</code></dd>
            <dt><code>mount.srfs</code></dt><dd>Mount and unmount a translation FUSE filesystem for a folder containing hash pointers: <code>mount.*</code>-style wrapper for <code>srfs</code>. Synopsis: <code>mount.srfs &lt;root-folder-name&gt; &lt;mountpoint&gt;</code></dd>
            <dt><code>ndu</code></dt><dd>Alternative way of invoking <code>rubberfs usage</code>. Synopsis: <code>ndu</code></dd>
            <dt><code>quickliquid</code></dt><dd>Quickly upload a file to the Internet Archive. Synopsis: <code>quickliquid &lt;file&gt;</code></dd>
            <dt><code>rubberfs</code></dt><dd>Not ready for production use! Provides tools for managing filesystems. Synopsis: <code>rubberfs ( ((create|mount|soft-mount|remount|rename|cd|unmount|soft-unmount|attach|check|save|freeze|gc|thaw|patch|status|list|usage-write|destroy|destroy-no-upload|historybak|historypull) [&lt;RubberFS-name&gt;]) | usage | whereami | stub | (stash &lt;file&gt;...) | (delta [&lt;RubberFS-name&gt; [--keep]]) )</code></dd>
            <dt><code>s3-streaming-upload</code></dt><dd>Not ready for production use! Streaming upload to Amazon S3–compatible endpoints, supporting some of the Internet Archive's extensions to S3. Synopsis: <code>s3-streaming-upload &lt;host-name&gt; &lt;collection&gt; &lt;identifier&gt; &lt;remote-file-name&gt; &lt;file-size-estimate&gt; &lt;title&gt; &lt;description&gt; &lt;keywords&gt; [access-key-id] [secret-access-key]</code> (if the access keys are not provided, <code>s3-streaming-upload</code> will attempt to retrieve them from <code>ia</code>'s configuration file)</dd>
            <dt><code>sreg_build_backup_set</code></dt><dd>Make a clone of a stream registry database where the bodies of the streams are stored instead of the pointers. Synopsis: <code>sreg_build_backup_set [--sreg-dir &lt;directory&gt;] &lt;target-directory&gt;</code></dd>
            <dt><code>sreg_check_failed</code></dt><dd>Check whether streams that could not be read in the past and were moved to the Failed Fsck directory have become readable in the meantime, and return them to the database if so. Synopsis: <code>sreg_check_failed [--sreg-dir &lt;directory&gt;] [--skip-cache]</code></dd>
            <dt><code>sreg_download_url</code></dt><dd>An alias for <code>sreg_enroll_url --download</code>. Synopsis: <code>sreg_download_url [--sreg-dir &lt;directory&gt;] &lt;URL&gt;</code></dd>
            <dt><code>sreg_enroll_url</code></dt><dd>Given an Internet Archive URL to a file, path to a file (with identifier), or identifier with file name in the form <code>[https://archive.org/download/]identifier/file/path</code>, add that file to the current Stream Registry. The URL should not have space URL-encoded. The <code>--download</code> option will also make a pointer to the file in the current directory. Synopsis: <code>sreg_enroll_url [--sreg-dir &lt;directory&gt;] [--download] &lt;URL&gt;</code></dd>
            <dt><code>sreg_flush_localstore</code></dt><dd>Convert LocalStore pointers to finished pointers. Synopsis: <code>sreg_flush_localstore [--sreg-dir &lt;directory&gt;]</code></dd>
            <dt><code>sreg_folder_check</code></dt><dd>Go through the hashpointers in the specified directory, make sure that they are present in the stream registry, optionally verify those streams, and optionally remove any streams from the stream registry that are not referenced by the hashpointers in the specified directory (defaults to listing them only, add <code>--delete</code> to actually remove). If no directory is specified, the Ember Library directory is assumed. Synopsis: <code>sreg_folder_check [--sreg-dir &lt;directory&gt;] [--verify] [ (--drop-unused | --drop) [--delete]] [&lt;directory&gt;]</code></dd>
            <dt><code>sreg_fsck</code></dt><dd>Verify that all entries in the sreg stream database can be read correctly. Beginning with Crystallize version 3.1.2.5.14.168, <code>--skip-cache</code> is the default. Synopsis: <code>sreg_fsck [--offline] [--skip &lt;number-of-items-to-skip&gt;] [--no-skip-cache|--skip-cache] [--drop-failed] [--no-skip-cache|--skip-cache] [&lt;repository-directory&gt;]</code></dd>
            <dt><code>sreg_fsck_hashpointers</code></dt><dd>Verify that all sreg hash pointers in the specified directory can be read correctly (an alias for <code>sreg_folder_check --verify</code>). Synopsis: <code>sreg_fsck_hashpointers [--sreg-dir &lt;directory&gt;] &lt;path&gt;</code></dd>
            <dt><code>sreg_init</code></dt><dd>Prepare a directory (need not exist) as a stream-registry-backed repository. The stream registry tools, with names prefaced by "sreg" (<em>s</em>tream <em>reg</em>istry), is a virtual file system layer that allows files to be stored as small text-based pointers that can be tracked using Git while avoiding the need to have the entire repository stored locally (the most-used data are cached locally, instead). It has some restrictions on what can be stored in it:
                <ul>
                    <li>Special files are not supported, other than symbolic links</li>
                    <li>Files or folders may not be named '<code>.git.686fc528-0e8e-4724-91bb-c103cdcdd592</code>'</li>
                    <li>Folders may not be named '<code>.sreg</code>'</li>
                    <li>Files may not begin with any of the following ASCII strings:
                        <ul>
                            <li><code>a5e2f296-3085-49c0-8f48-24ea436b7a8b</code></li>
                            <li><code>c39f8657-384b-438b-a5a2-eece17147589</code></li>
                            <li><code>2fae2004-94bb-4aa8-a01a-fc44298efc2c</code></li>
                            <li><code>209fcfdf-d1ad-4345-8ef7-1fdc2d583d49</code></li>
                            <li><code>760fa662-89cf-4ebd-9664-150b7637ddd4</code></li>
                        </ul>
                    </li>
                </ul>
              While it is suboptimal to have these restrictions, they allowed the implementation of sreg to be simpler. Patches to fix these issues would be considered, if someone has the interest to write them (it's currently on the to-do list at <a href="http://futuramerlin.com/issue-tracker/view.php?id=587">issue #587</a>). By default, the stream registry LocalStore folder (a temporary gathering location for small files that will be stored as a batch when sreg_flush_localstore is run — it will be run occasionally automatically, and can be run manually if desired) is added to a file called <code>.gitignore</code> in the target directory, under the assumption that the stream registry will be kept in Git version control; to suppress this behavior, use the <code>--no-gitignore</code> option. Synopsis: <code>sreg_init [--passphrase &lt;passphrase&gt;] [--no-gitignore] [&lt;path-to-folder-to-prepare&gt;]</code></dd>
            <dt><code>sreg_pointer_report</code></dt><dd>Given a pointer, prints the pointer hash, pointer type, stream length (if stored in the pointer), and a list of all hashpointers referencing it in the current directory. The usual way to run this command would be to cd to the root of the stream repository containing the pointer you would like a report on, and run this command with a checksum as its only argument. The <code>--print-if-matching-hashpointer</code> option prints the path to the pointer given if the checksum of the pointer given matches the checksum given on the command line. Synopsis: <code>sreg_pointer_report (( --print-if-matching-hashpointer &lt;checksum&gt; &lt;path-to-pointer&gt; ) | ( [--sreg-dir &lt;directory&gt;] ( &lt;checksum&gt; | &lt;path-to-hashpointer&gt; ) ))</code></dd>
            <dt><code>sreg_read_stream</code></dt><dd>Accepts a sreg pointer on stdin, and outputs the corresponding data from the stream registry. If a checksum is provided on the command line, the retrieved data will be checked against it. Synopsis: <code>sreg_read_stream [--lock-override|--no-lock-override] [--sreg-dir &lt;directory&gt;] [--ignore-lock] [--checksum &lt;checksum&gt;] [--disallow-hash-pointer] [--skip-cache]</code></dd>
            <dt><code>sreg_store_stream</code></dt><dd>Stores data provided on stdin into the stream registry, and sends a pointer to it to stdout (or, optionally, to a specified file: the <code>--output-file</code> option acts similarly to redirecting <code>sreg_store_stream</code>'s standard output to the specified file, but has additional sanity checks to avoid writing to files needed by the stream registry; consequently, this option is generally preferable to a simple redirection, unless you know the redirection is going somewhere safe). A checksum, if one is known for the stream, can be provided on the command line for a slight performance improvement. Synopsis: <code>sreg_store_stream [--sreg-dir &lt;directory&gt;] [--output-file &lt;file&gt;] [--assume-checksum &lt;checksum&gt;]</code></dd>
            <dt><code>srfs</code></dt><dd>Mount and unmount a translation FUSE filesystem for a folder containing hash pointers. Synopsis: <code>srfs [--sreg-dir &lt;directory&gt;] [ (mount ([&lt;root-folder-name&gt;] | [&lt;root-folder-name&gt; &lt;mountpoint&gt;])) | (unmount [&lt;mountpoint&gt;]) | ([&lt;root-folder-name&gt; &lt;mountpoint&gt;]) ]</code></dd>
            <dt><code>srpull</code></dt><dd>Copy the first argument(s) into the destination (usually the last parameter) and replace any enclosed sreg pointers with their contents. If only one path is specified, the current directory will be used as the destination. The <code>--replace</code> option controls whether files that exist in the destination are overwritten (files that exist in the destination that do not exist in the source will not be removed) (the default is <code>--replace</code>). Synopsis: <code>srpull [--skip &lt;number-of-items-to-skip&gt;] [--replace|--no-replace] ((&lt;source-path&gt;... &lt;destination-directory&gt;) | &lt;source-path&gt;)</code></dd>
            <dt><code>srsync</code></dt><dd>Copy the first argument(s) into the destination (usually the last parameter) and replace non-pointerized or out-of-date files in the destination with their pointers. If only one path is specified, the current directory will be used as the destination. Synopsis: <code>srsync [--sreg-dir &lt;directory&gt;] [--skip &lt;number-of-items-to-skip&gt;] [--verify|--no-verify] [--keep-going] ((&lt;source-path&gt;... &lt;destination-directory&gt;) | &lt;source-path&gt;)</code></dd>
        </dl>
        <p>In addition, Crystallize also provides the following scripts that it uses internally that are not supported for independent use.</p>
        <dl>
            <dt><code>crystallize-bash_setup</code></dt><dd>Set up the bash environment shared by Crystallize tools. Synopsis: <code>source crystallize-bash_setup</code></dd>
            <dt><code>crystallize-logsession</code></dt><dd>The main logic for <code>crystallize</code>. Synopsis: <code>crystallize-logsession ([--offline] | [--complete]) &lt;true-if-using-custom-passphrase&gt; &lt;custom-passphrase-if-using&gt; &lt;log-file&gt; &lt;crystal-address&gt; &lt;file&gt;...</code> (needs specific environment variables set)</dd>
            <dt><code>localstorecache_init</code></dt><dd>Create a "localstorecache" cache directory: localstorecache is a naïve caching layer for LocalStore crystals (variant of "fcache"). Synopsis: <code>localstorecache_init &lt;directory-name&gt; &lt;cache-size-limit-in-bytes&gt;</code> (if the cache directory already exists, the current size limit will override the one provided as an argument)</dd>
            <dt><code>localstorecache_request</code></dt><dd>Get an item (returned as a file path) using the specified "localstorecache" cache. Synopsis: <code>localstorecache_request [--sreg-dir &lt;directory&gt;] &lt;cache-directory&gt; &lt;crystal-address&gt;</code></dd>
            <dt><code>scache_gc</code></dt><dd>Drop old items from the specified (s/f/localstore)cache. Defaults to scache. Synopsis: <code>scache_gc [--verbose] &lt;cache-directory&gt; [s|f|localstore]</code></dd>
            <dt><code>sregi_bundle_pointer</code></dt><dd>Given a LocalStore pointer, replace it with a remote pointer. If a tracking file (should contain only an integer) is specified, the file's value will be incremented (to not specify it, pass an empty string as that argument). Synopsis: <code>sregi_bundle_pointer &lt;path-to-instance-file&gt; [--sreg-dir &lt;directory&gt;] &lt;tracking-file&gt; &lt;path-to-remote-pointer-data&gt; &lt;path-to-pointer-to-replace&gt; &lt;crystalWorkdir-config-value&gt;</code></dd>
            <dt><code>sregi_check_failed_entry</code></dt><dd>Check that the specified pointer not in the stream registry database can be retrieved, and if so, move it into the stream registry database. If a tracking file (should contain only an integer) is specified, the file's value will be incremented. Synopsis: <code>sregi_check_failed_entry &lt;path-to-instance-file&gt; [--sreg-dir &lt;directory&gt;] &lt;path-to-pointer&gt; [tracking-file] [--skip-cache]</code></dd>
            <dt><code>sregi_copy_read</code></dt><dd>Copy the first argument (must be a regular file) to the first argument appended to the destination folder, and if it is a sreg pointer, replace it with its contents. If a tracking file (should contain only an integer) is specified, the file's value will be incremented (to not specify it, pass an empty string as that argument). <code>characters-to-trim</code> is the number of characters to remove from the source filename to give the location of the destination file relative to the enclosing destination directory. Synopsis: <code>sregi_copy_read &lt;path-to-instance-file&gt; [--skip &lt;number-of-items-to-skip&gt;] [--sreg-dir &lt;directory&gt;] [--replace] &lt;path-to-file&gt; &lt;destination-folder&gt; &lt;tracking-file&gt; &lt;characters-to-trim&gt;</code></dd>
            <dt><code>sregi_copy_write</code></dt><dd>Copy the first argument to the first argument appended to the destination folder, and replace it with a sreg pointer. If a tracking file (should contain only an integer) is specified, the file's value will be incremented (to not specify it, pass an empty string as that argument). <code>characters-to-trim</code> is the number of characters to remove from the source filename to give the location of the destination file relative to the enclosing destination directory. Synopsis: <code>sregi_copy_write &lt;path-to-instance-file&gt; [--skip &lt;number-of-items-to-skip&gt;] [--sreg-dir &lt;directory&gt;] [--no-verify] &lt;path-to-file&gt; &lt;destination-folder&gt; &lt;tracking-file&gt; &lt;characters-to-trim&gt;</code></dd>
            <dt><code>sregi_drop_single_unused</code></dt><dd>Remove the specified pointer from the stream registry if it is not listed in the specified ID list (newline-separated list of pointer IDs). Synopsis: <code>sregi_drop_single_unused &lt;path-to-instance-file&gt; [--sreg-dir &lt;directory&gt;] &lt;path-to-pointer&gt; &lt;path-to-ID-list&gt; &lt;tracking-file&gt;</code></dd>
            <dt><code>sregi_file_backup</code></dt><dd>Accepts a sreg database entry as an argument, and replaces the entry with the entry's contents (but does nothing if this has already been done). The "instance file" is used to check whether a previous instance of this command has failed to exit successfully when this command is called repeatedly using <code>find</code>'s <code>-exec</code> option, which lacks a convenient way to abort execution immediately upon failure. Synopsis: <code>sregi_file_backup &lt;path-to-instance-file&gt; [--sreg-dir &lt;directory&gt;] &lt;path-to-database-entry&gt;</code></dd>
            <dt><code>sregi_find_dir</code></dt><dd>Report the location of the stream registry applicable to the current directory, or (if specified) the given path. Synopsis: <code>sregi_find_dir [--sreg-dir &lt;directory&gt; [--full-check]] [&lt;path&gt;]</code></dd>
            <dt><code>sregi_fuse.py</code></dt><dd>Mount a FUSE filesystem overlay for sreg. Synopsis: <code>sregi_fuse.py &lt;sreg-repository-to-mount&gt; &lt;mount-point&gt; &lt;sreg-directory&gt;</code></dd>
            <dt><code>sregi_get_passphrase</code></dt><dd>Print a stream registry passphrase, either the system default or the passphrase for the sreg repository provided as an argument. Synopsis: <code>sregi_get_passphrase [&lt;sreg-repository&gt;]</code></dd>
            <dt><code>sregi_get_length_from_pointer</code></dt><dd>Return the length (size) in bytes of the path specified, or of the data referenced by a pointer if the path is a pointer. Synopsis: <code>sregi_get_length_from_pointer [--sreg-dir &lt;directory&gt;] &lt;path&gt;</code></dd>
            <dt><code>sregi_hashpointer_sane</code></dt><dd>Check that the pointer corresponding to the specified hash pointer (it's OK to toss pretty much any files at it — hash pointers, other pointers, and files that aren't pointers at all; non–hash pointer pointers will have hash pointers generated on demand for testing, and non-pointer files will be ignored and reported as success: this allows checking folders containing a mix of file types) is present in the stream registry, and add the specified hash pointer to the specified ID list for use by <code>sregi_drop_single_unused</code>. If instead of a file name "-" is given, the input to check will be read from standard input (use "./-" to check a file named "-" in the current directory). Synopsis: <code>sregi_hashpointer_sane [--fail-check &lt;path-to-instance-file&gt;] [--sreg-dir &lt;directory&gt;] [&lt;path-to-hashpointer&gt;|-] [&lt;path-to-ID-list&gt; &lt;tracking-file&gt; [--verify]]</code></dd>
            <dt><code>sregi_verify_backup</code></dt><dd>Basic sanity check of whether the specified backup can be used. If a tracking file (should contain only an integer) is specified, the file's value will be incremented. Synopsis: <code>sregi_verify_backup &lt;path-to-instance-file&gt; &lt;path-to-file-to-check&gt;</code></dd>
            <dt><code>sregi_verify_entry</code></dt><dd>Check that the specified pointer can be retrieved. If a tracking file (should contain only an integer) is specified, the file's value will be incremented. If a report file path is given, a failed pointer's hash will be appended to the report file. If <code>--notes</code> is specified, a note will be left at each succeeded pointer (a file with a name ending in <code>.verified</code>), and any pointers with one of these files will be skipped. The note files can be removed to recheck the corresponding pointers. Synopsis: <code>sregi_verify_entry [--lock-override|--no-lock-override] [--fail-check &lt;path-to-instance-file&gt; [--skip &lt;number-of-items-to-skip&gt;]] [--notes] [--sreg-dir &lt;directory&gt;] [--report-to &lt;path-for-report-file&gt;] &lt;path-to-pointer&gt; [tracking-file] [--quick] [--skip-cache|--skip-drop-failed|--drop-failed]</code></dd>
        </dl>
        <p><code>crystallize-bash_setup</code> provides these bash functions.</p>
        <dl>
            <dt><code>rubberfs</code></dt><dd>Wrapper around the <code>rubberfs</code> script: this function should be used instead. Synopsis: <code>rubberfs ( ((create|mount|soft-mount|remount|rename|cd|unmount|soft-unmount|attach|check|save|freeze|delta|gc|thaw|patch|status|list|usage-write|destroy|destroy-no-upload|historybak|historypull) [RubberFS name]) | usage | whereami | stub | (stash &lt;file&gt;...) )</code></dd>
            <dt><code>crystallize_quick_unpack</code></dt><dd>Quickly decrypt and, if necessary, decompress a file from a crystal (e.g. <code>.coal5</code>, <code>.coal5-csum</code>, etc.). Only handles files using the configured passphrase or the default passphrase. Synopsis: <code>crystallize_quick_unpack [--to &lt;destination-directory&gt;] &lt;file&gt; [--to &lt;destination-directory&gt;]</code></dd>
            <dt><code>git-absolute-path</code></dt><dd>???? Synopsis: <code>git-absolute-path &lt;file&gt;</code></dd>
            <dt><code>git-escape-path</code></dt><dd>???? Synopsis: <code>git-escape-path &lt;path&gt;</code></dd>
            <dt><code>iu</code></dt><dd>Alias for <code>quickliquid</code>. Synopsis: <code>iu &lt;file&gt;</code></dd>
            <dt><code>sregi_available_by_hash</code></dt><dd>Basic sanity check for a stream registry entry given the checksum corresponding to the entry to check. Synopsis: <code>sregi_available_by_hash &lt;checksum&gt; [&lt;path-to-hashpointer&gt;]</code></dd>
            <dt><code>sregi_hash_from_file</code></dt><dd>Retrieves and prints the checksum from a pointer. Synopsis: <code>sregi_hash_from_file &lt;file&gt;</code></dd>
        </dl>

    <h3>Installation</h3>
        <p>For Wreathe 7.3, an ebuild (<code>app-misc/crystallize</code>) is available in the <a href="/ancillary/wreathe">Wreathe</a> overlay (this may also work for similar operating systems such as Ututo XS GNU/Linux).</p>
        <p>For other operating systems, use the following installation instructions.</p>

        <h4>Instructions for installation without ebuild</h4>

            <h5>Requirements</h5>
                <p><span class="hatnote-emphasis-warning"><a href="/ancillary/wreathe">Wreathe</a> 7.3 is required for full support. The simple invocations of the 'crystallize' and 'decrystallize' commands (with filenames as the only arguments) are also supported on Ubuntu GNU/Linux and macOS 10.12 in the interest of promoting the preservation of knowledge (although Ember strongly advises not using non-libre software such as those operating systems), and will probably work on many other UNIX-like operating systems; these instructions only cover that basic support. This is not as well tested as using the software in Wreathe. Please <a href="/issue-tracker/">report</a> issues if you encounter them.</span></p>

                <ul>
                    <li><a href="../ember-shared">ember-shared</a> (required during Crystallize installation as well as at runtime)</li>
                    <li>An account at the non-profit <a href="https://archive.org/">Internet Archive</a></li>
                    <li>ia (<a href="https://pypi.python.org/pypi/internetarchive">https://pypi.python.org/pypi/internetarchive</a>) 1.0.2 or later (ia must be configured by running <code>ia configure</code> since installing 1.0.2 or later before Crystallize can be used)</li>
                    <li>a root login or administrator/sudo privileges for your local computer, both for installation and use of all tools except quickliquid and dequicklify.</li>
                    <li>wget 1.14 or later</li>
                    <li>git</li>
                    <li>GNU tar: GNU tar 1.30 or later is preferable to earlier tar versions (it fixes <a href="https://lists.gnu.org/archive/html/bug-tar/2016-06/msg00013.html">a bug</a> that can cause Crystallize to fail in some cases, although since checksumming was added to Crystallize, the bug is unlikely to cause data corruption)</li>
                    <li>sha512sum (from GNU coreutils)</li>
                    <li>readlink (GNU coreutils version or compatible)</li>
                    <li>hashdeep 4.4 or later</li>
                    <li>bash 4.4 or later (may work with 4.2 or later)</li>
                    <li>pv</li>
                    <li>sponge (from moreutils)</li>
                    <li>A recent version of bash</li>
                    <li>make</li>
                    <li>perl</li>
                    <li>rsync</li>
                    <li>grep</li>
                    <li>at least one of:
                        <ul>
                            <li>free</li>
                            <li>vm_stat</li>
                        </ul>
                    </li>
                </ul>

                <p>While using full functionality is not supported without using the ebuild, the following additional requirements are needed for it (this list is probably incomplete/incorrect).</p>
                <ul>
                    <li>ncdu (especially for <code>rubberfs usage</code> / <code>ndu</code> — this is the only additional requirement needed for <code>rubberfs usage</code> / <code>ndu</code>, specifically)</li>
                    <li>GNU userland (or compatible)</li>
                    <li>OpenZFS</li>
                    <li><a href="../futuramerlin-web-toolkit">futuramerlin-web-toolkit</a> (required to use the <code>egup-web</code> command)</li>
                </ul>

            <h5>Download</h5>
                <p>To download Crystallize, run:</p>
                <pre><code>git clone https://github.com/ethus3h/crystallize.git</code></pre>

            <h5>Copy scripts</h5>
                <p>To install the downloaded scripts, run <code>cd crystallize; make</code>.</p>

            <h5>Setup</h5>
                <p>Edit the configuration file; see <a href="#Configuration_file_format">the "Configuration file format" section</a> for documentation of this.</p>

                <p>Finally, run <code>sudo make install</code>.</p>

<h2>Configuration file format</h2>
    <p>The configuration file is located in your system configuration directory (probably <code>/usr/local/etc</code> or <code>/etc</code>), and is named <code>crystallize.conf</code>. It is a list of key-value pairs in the format <code>Key,Value</code>, separated by a line feed (0x0A), as follows:</p>
    <dl>
        <dt>InstallationIdentifier</dt><dd>Installation UUID</dd>
        <dt>Collection</dt><dd>Internet Archive collection identifier (write access to the collection is required)</dd>
        <dt>Passphrase</dt><dd>Passphrase (must be a valid GPG passphrase)</dd>
        <dt>WorkDirectory</dt><dd>Directory for working data (should be writeable and have sufficient free space to hold approximately three times the amount of data being crystallized at any one time). MUST NOT have newline in the path. A space in the path may cause degraded performance (see comments in <code>scache_gc</code>), and will cause failure if the part of the path name preceding the space is also a pathname that exists; ideally, don't have a space in the path.</dd>
        <dt>EmberLibrary</dt><dd>Path to a directory tree of the format used by the <a href="/library/">Ember Library</a></dd>
        <dt>SrfsMountpoint</dt><dd>The mountpoint to be used when <code>srfs</code> is run without one specified.</dd>
        <dt>SrfsDefaultRoot</dt><dd>An optional override for the default stream registry directory to be mounted when <code>srfs</code> is run without one specified (by default, the value of the <code>EmberLibrary</code> configuration field is used instead).</dd>
    </dl>
    <p>Note that there is currently no facility for storing configuration values containing line feeds.</p>

<h2>Development</h2>
    <p>To learn about contributing to this project, visit <a href="../develop.htm">the development page</a>.</p>
