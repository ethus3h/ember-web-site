<h1>StageL: Simple staging language</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/components.htm">Core project components</a></span>
    <span><a href="/specification">Specification</a></span>
    <span><a href="/specification/engineering-and-tech">Engineering and Technology</a></span>
    <span><a href="/specification/engineering-and-tech/information-technology">Information technology</a></span>
    <span><a href="/specification/engineering-and-tech/information-technology/software">Information Technology Software Environment</a></span>
</p>

<h2>Overview</h2>
    <p>StageL is a simple programming language for easily writing portable algorithms to be transpiled to and used by programs in other languages. It is the language used for, and was developed to be used for, the primary implementation of the <a href="index.ftm">Ember information technology environment</a> (EITE), and thus of the Dc-based document format used by EITE. The name "StageL" comes from calling it a "staging language" (which refers to its being a tool for developing the main EITE software, which should provide a more complete language).<!-- Also, "StageL" sounds catchy, and should be relatively unique. It does seem reminiscent of "stage left" in theater, but that doesn't really have anything to do with it. Although I later punned on that by calling the code written in it "StageR". --> This project was inspired by the ugly code that resulted when I tried to write using these principles directly in JavaScript, needing a lot of easy-to-mess-up boilerplate code and awkward notation (largely because it is not strongly typed).</p>
<h2>Design goals</h2>
    <ul>
        <li>Imperative language. Trivial to implement, learn, and read; extremely portable.</li>
        <li>Provide uint8 values, uint8 arrays, and basic operations for creating and altering them (as a set of routines implemented in the target language; a "StageL core") as the base types? That would allow it to be used kind of like memory/pointers</li>
        <li>Type system: define types as grammar of uint8 (o=uint8: octet). :letters: indicates a reference to another type. Serialization: :type:data: with / replaced in the data with // and : replaced in the data with /d (for delimiter)</li>
        <pre><code>
            b: 00|01 # boolean
            ao: :o:+ # array of bytes
            ab: :b:+ # array of bools
            n: oooooooo # 64-bit signed int
            an: :n:+ # array of numbers
            s: 20|22|25|28|29|2c|2d|2e|2f|30|31|32|33|34|35|36|37|38|39|3a|3b|3c|3d|3e|3f|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a+ # string
            as: :s:1f+ # array of strings. Separated by 0x1f unit separator
            kv: :s
        </code></pre>
        <li>Provide routine calls, and provide strings (albeit simple; see below; [TODO: perhaps should transpile to array functions operating on uint8?]), numbers (signed int32), numbers (unsigned int8), booleans, and arrays of these four types as primary types with easy to use syntax produced by the transpiler for these types with strict type checking. Objects and first-class functions are out of scope for this language. (this is the main syntax used by existing StageL code as of 2020m1d8) [TODO: Implement a table of values and scopes that gets filled in and managed at runtime by the debug routine calls, and track their types for optional strict type checking. Provide a means of additional type annotations for compound types (e.g. tables, lists, or key-value pairs), and for types that are optional to implement natively and will be emulated otherwise (i.e. anything other than strings, int32, or booleans: all types and operators available in WebAssembly should be available), and strictly check these annotations.] (It's currently closer to duck-typed in practice, as e.g. in Bash there would be no distinction between string 0 and number 0.)</li>
        <li>Implemented as a transpiler that accepts a file as input and produces a file in the target language as output.</li>
        <li>Should be self-hosted, bootstrapped using Bash and perhaps other languages. Bootstrap implementation doesn't need to be fancy, just enough to get the actual implementation to build itself.</li>
        <li>Should transpile to (eventually) JavaScript, C, Java, Bash, PHP, Microsoft CIL, Lisp, x86 assembly, and Python, at least, in roughly that order of priority. (JavaScript has been completed from the bootstrap transpiler for work on the main EITE software and Bash is done but untested; C and Java should follow soon thereafter for their portability; the other languages are nice to have to cover a diverse range of development environments, and additionally, in the case of CIL/x86 assembly/Lisp, of providing interesting challenges in ensuring that the language really is easily portable due to their difference from the others.)</li>
        <li>Focus on simplicity and portability: it should purely be an algorithm representation format, without input/output capabilities. It is for implementing the algorithms of a program once, and having it be available in various languages. Things such as input/output and native calls should be implemented in the EITE NDW instead, which will call in to the StageL code, passing any input values, and StageL would return a standard response value format. Response format from NDW should be a uint8array with an an extensible, clear structure within it (à la JSON). Calls from the language itself using StageL as a library would use whatever the native formats were.</li>
        <li>All input/output to/from the language is as routines. All code must be in a routine, with declared parameters, parameter types, variables needed [TODO: Should variable declarations all be at the top of a routine?], and return type. (The expense of the simple type system is that changing return values would break routines' API, since "out" parameters and/or pointers would not be available, but this should allow the code to be simple and readable, which is a priority for this language.)</li>
        <li>Transpile-time validation: all types, return types, and argument uses and parameter types correct; no chance of exiting routine without returning; variables all declared before use</li>
        <li>Things like debugging and type-checking routines should be interpolated into the command stream as a step after parsing and before codegen, to avoid needing to reimplement them by hand in the target languages: they should be normal StageL code. Same goes for "until" and "unless" keywords.</li>
        <li>Output files should retain the structure and comments of the input files, thereby retaining readability as far as the target language permits.</li>
        <li>All behavior should be specified. Ambiguous programs should be impossible to write knowing the specification, and (as far as possible) the meaning of a program should be obvious and unambiguous <em>without</em> the language specification. Programs that do not match the specification exactly should be entirely rejected, rather than produce warnings or having a best guess of its meaning made.</li>
        <li>To do: Proper type tracking. Escapeable newlines? UInt8 literals as strings+escaped characters. Get rid of generic types. Routine documentation format: first comment documents the routine. Parameters come first, with a comment for each parameter, in order. Let statements should go at top of routine, and all have a comment at the end of their line. Return statement should have comment before it describing it. Should any or all of these be required?<code>r/s/helloWorld s/parameter1 s/parameter2\ # Returns "Hello, World!".\ # The first parameter.\ # The second parameter.\ new s/res # The string to return.\ set s/res s/parameter1\ set s/res "Hello, World!"\ # The string "Hello, World!" that has been prepared\ return s/res</code></li>
    </ul>
<h2>Actual results of the design goals</h2>
    <p>It works satisfactorily. It's pretty portable, I think. Things aren't fully specified because it transpiles to native constructs that behave differently between target languages. This could be resolved by implementing a virtual machine or similar in each target language, but that's a pain, so this is good enough for what this is for. Low-level facilities aren't really available yet. I guess they can be added as additional builtin routines. One option might be implementing a WebAssembly VM or something that is available implemented purely in StageL, but can be accessed natively if available to be faster. How to bootstrap that? Maybe implement an X86 virtual machine in StageL, which would run the Guix bootstrap seed to build a WASM toolchain, which would in turn bootstrap Guix again to get out of the StageL virtual machine to pure WASM?</p>
<h2>Syntax</h2>
    <p>Lines are separated by 0x0A. Each line consists of printable ASCII text: a–z, 0–9, apostrophe, slash, spaces, &lt;, &gt;, [, ], (, ), {, and }, and any other printable ASCII characters in string literals or comments (apostrophe is not yet available in string literals). Within a line is a sequence of space-delimited words. Semantic levels are denoted by four spaces' indentation. The first word in a line is a command. Comments (started with #) and string literals can contain any printable ASCII (although string literals can't contain ' because it's used to indicate them; this could probably be fixed easily enough at some point (TODO)). Identifiers can contain ASCII text a-z A-Z and 0-9 (but 0-9 may not be the first character, and code that relies on case sensitivity or insensitivity by having ident references differ only in case or having two idents that differ only in case is a (possibly un-notified-about) error (these are not technical restrictions; they're just required in the interest of portability)).</p>
    <p>There are a number of built-in commands in the core language, which is in core.js or whatever your output language is. There are also commands from the standard library, which is in portable.js.</p>
    <h3>Gotchas</h3>
    <ul>
        <li>Whitespace is (usually) significant. There isn't a 1:1 correspondence between valid source files and the parsed code, though, I don't think. Indentation must be with 4 spaces per level.</li>
        <li>Unexpected byte values in code files aren't allowed and should cause the parser to die; strings or comments containing byte values other than printable ASCII are an error.</li>
        <li>The value of a variable before it has been set in a given block is undefined; don't access it until it has been set (and don't rely on variable hoisting). That's an error, but there isn't anything in place to detect it.</li>
        <li>Argument lists can contain references to any type.</li>
        <li>Strings are not intended to be used for data interchange; rather they're for process-internal use for making semantically clear array mappings and such — they don't have any Unicode or binary-safe support, or even full printable ASCII support (' isn't supported in strings) for that matter. An integer array representing bytes is preferred for when you need to actually keep more careful track of data.</li>
        <li>Routine parameter types can be generic, string, number, bool, or array. Void is not an allowed parameter type (although I'm not sure what that would actually mean).</li>
        <li>Routine return types can be string, number, bool, array, or void. Generic return type is not allowed, separate routines for each return type desired must be used instead.</li>
        <li>Routines can be composed in argument lists, but unless you close the parameter lists explicitly using <code>}</code>, only one inner routine can be used per argument list; the inner routine must be the last argument. Using <code>}</code> or temporary variables is needed in other cases. For example: <code>set n/foo add 2 mod 7 5</code> sets n/foo to 4, but you can't do <code>set n/foo add mod 7 5 2</code> or <code>set n/foo add mod 7 5 mod 7 5</code> are errors, although they won't necessarily give an error (they will be interpreted as add(mod(7,5,2)) and add(mod(7,5,mod(7,5))) respectively, with the third argument to mod probably being discarded by the implementation). Instead, you can write these as <code>set n/foo add mod 7 5 } 2</code> or <code>set n/foo add mod 7 5 } mod 7 5</code>, respectively.</li>
        <li>Some commands (e.g. new, return) can't handle routines in argument lists; this <strong>should</strong> die with an error, but no promises.</li>
        <li>Referencing or assigning to a variable that has not been declared is an error, but there isn't anything in place to detect it.</li>
        <li>Code like:<pre><code>r/s/fbSwitcher n/num
    if eq 0 mod n/num 15
        return 'Buzz'</code></pre> is an error, because if the if statement is not true, the function will exit without returning (basically being a void). There's nothing in place to detect this, though. This example is from <code>cli/tests/stagel/js/routine-fbSwitcher-return-type/in/in.stagel</code>, which should perhaps be rewritten to not have this fault (ideally, a check for this problem would be added to the transpiler or generated code, but I can't be bothered right now). Likewise, routines with a return type but no return statement are an error without any detection.</li>
        <li>In assignments, calls, etc. where routines can be composed, they usually have to be evaluated strictly left to right. Thus, <code>set n/a sub len s/b 1</code> is an error (I don't think there is any detection for this): it will be interpreted as <code>set(n/a, sub(len(s/b, 1)))</code> when what is desired is <code>set(n/a, sub(len(s/b), 1))</code>. It should instead either use the inline-arglist-end marker <code>}</code> and be written as <code>set n/a sub len s/b } 1</code>, or be written as two statements: first <code>set n/a len s/b</code>, then <code>set n/a sub n/a 1</code>.</li>
        <li>Type constraints are generally only enforced when values are returned or given as parameters (in which case they are checked by code automatically inserted into the routine called during transpilation). Thus, for instance, you can assign the wrong datatype to a variable without it showing an error, and it will only die when it gets returned or passed to another routine.</li>
        <li>Array literals can (probably) only be used with the <code>set</code> command. For other things, make a temp value, assign the array literal to it, and then use the temp value in its place.</li>
        <li>Whitespace requirements apply to lines where the entire line is a comment, too.</li>
        <li>Comments have to be on their own lines.</li>
	<li>What's wrong with this code? <pre><code>    while lt 8 len an/res
                set an/res push [ 0 ] an/res
	</code></pre> The array bracket type doesn't match the content type: [ is for strings, while ( is for numbers.</li>
	<li><code><pre>set an/remainderArr anSubset an/in -5 -1 # last 4 characters</pre></code> breaks; the comment needs to be on a separate line.</li>
	<li>Code like <code><pre>set as/data append as/data [ s/key s/val ]</pre></code> is an error: array literals can't contain variables in their definitions.</li>
    <li>Perhaps test conditions should have to be on the same line as the test keyword. For example, <pre><code>if
    lt n/a 0</code></pre> would be an error; it should be written as <code>if lt n/a 0</code> instead. Previously it was intended to support splitting them onto separate lines, but it is tedious to implement, and somewhat makes the StageL code harder to read anyway. As a result, this perhaps should be an error.</li>
    <li><code>until</code> statements don't work (search for "This doesn't work. I guess it'll just be necessary to forgo split-line untils for now, although I'm not sure split-line commands are really desirable regardless. FIXME" in the code).</li>
    </ul>
    <h3>Example</h3>
    <pre><code>
r/s/fbSwitcher n/num
    if eq 0 mod n/num 15
        return 'FizzBuzz' # just a literal sequence of ASCII printable characters.
    # Comment
    if eq 0 mod n/num 5
        return 'Buzz' # Comment 2
        # Comment 3
    if # Could also write it like this, with the condition on another line
        eq 0 mod n/num 3
        return 'Fizz' # Comment 4

r/s/fizzBuzz # A string is an array of ASCII printable characters.
    # return-assert -n # the output should be non-empty.
    new n/counter 1
    until
        eq n/counter 100
        set n/counter add n/counter 1
        new s/temp ''
        set s/temp r/s/fbSwitcher n/counter
        return s/temp
</code></pre>

<h2>Special syntaxes</h2>
    <p>For loops aren't available because they add complexity to the transpiler.</p>
    <dl>
        <dt>if</dt><dd>conditional: bool, block</dd>
        <dt>else</dt><dd>if, bool, block, (elif, bool, block)..., else, block</dd>
        <dt>elif</dt><dd>if, bool, block, (elif, bool, block)...</dd>
        <dt>while</dt><dd>while, bool, block</dd>
        <dt>until</dt><dd>until, bool, block</dd>
        <dt>new</dt><dd>new ident</dd>
        <dt>set</dt><dd>set ident value</dd>
        <dt>}</dt><dd>End parameter list without new line</dd>
        <dt>{</dt><dd>Loop over an array. FIXME: does this work when nested? (are the generated variable names duplicated?) How it's used: <pre><code>new as/temp
set as/temp [ 'd' 'b' 'l' 'c' 'b' 'a' ]
new n/c
as/temp { n/i s/elem
    set n/c inc n/c
</code></pre>. This is shorthand for: <pre><code>new as/temp
set as/temp [ 'd' 'b' 'l' 'c' 'b' 'a' ]
new n/c
new n/i
new s/elem
while lt n/i count as/temp
    set s/elem get as/temp n/i
    set n/i inc n/i
    set n/c inc n/c
</code></pre></dd>
    </dl>

<h2>Scope</h2>
    <p>Values are available until the end of the block they are in. Whether they propagate outside of the block is undefined. Accessing them outside the block, or before the line they are defined, is an error, but there isn't anything in place to detect it. Use routine return values to move things around.</p>

<h2>Errors</h2>
    <p>When an error is encountered, it will produce a message somehow. Execution of the program may stop. Otherwise, behavior is undefined. For instance, in JavaScript in browser it will send a console log message. In bash, it will call "die" from ember-shared. FIXME: Can error conditions be eliminated at transpile-time by proving what the code does?</p>

<h2>Types and basic commands for them</h2>
    <p>Routines that have type "v" are void. These are all the primitive commands that are implemented natively for each language. Other commands are included in StageR library of useful commands. Type "g" is generic, can only be used as a parameter for a routine. It indicates it can be either string, int, or bool. Type "ga", can also only be used as a parameter, is a generic array, which is either an array of ints, an array of strings, or an array of bools (an array can't contain a mixture), and all arrays passed to a routine that accepts generic-array parameters must be the same type (e.g. all int arrays). Type "gi" (generic item(s)) is like "ga" but can also be a single bool, int, or string.</p>
    <h3>b: Booleans</h3>
        <p>Can be True or false. Can not be undefined (initialized to false).</p>
        <dl>
            <dt>r/b/and n/a n/b</dt><dd>Returns bool a and b</dd>
            <dt>r/b/or n/a n/b</dt><dd>Returns bool a or b</dd>
            <dt>r/b/not n/a n/b</dt><dd>Returns bool a not b</dd>
        </dl>
    <h3>o: Numbers (uint8)</h3>
        <p>o for octet, since b was taken for boolean so can't be used for byte. Work like int32.</p>
    <h3>n: Numbers (int32)</h3>
        <p>Can be 0, or positive integer. Can not be undefined (initialized to 0). Currently is restricted to 32-bit signed (-2,147,483,648 to 2,147,483,647), but may be increased if more are needed.</p>
        <dl>
            <dt>r/n/add b/a b/b</dt><dd>Returns the sum of two numbers a and b</dd>
            <dt>r/n/sub b/a b/b</dt><dd>Returns the difference of two numbers a and b</dd>
            <dt>r/n/mod b/a b/b</dt><dd>Returns the modulo of two numbers a and b</dd>
        </dl>
    <h3>s: Strings</h3>
        <p>A sequence of characters: can be ASCII printable characters or space. No newlines or control characters, I guess. The string support isn't supposed to be very capable, just easy to implement lowest-common-denominator between target languages for making convenient labels and such. For actual data, use arrays of integers.</p>
        <dl>
            <dt>r/s/substring s/input n/start n/end</dt><dd>Give the characters from start to end (indices as bytes (characters — no Unicode support here, sorry) into input)</dd>
            <dt>r/s/cat s/a s/b</dt><dd>Concatenates a and b</dd>
            <dt>r/n/len s/input</dt><dd>Gives the number of bytes of input.</dd>
        </dl>
    <h3>Basic type utility routines</h3>
        <p>These operate on str/int/bool.</p>
        <dt>r/s/strFrom g/input</dt><dd>Give string with contents.</dd>
    <h3>Array utility routines</h3>
        <p>A set of routines for managing arrays apply to any of the three array types (except the typed subset ones). Note that the push/append/prepend routines may not check that the type of the item being added to the array matches the array type; calling it with mismatched parameters is an error but may not be reported.
        <dl>
            <dt>r/a/copy gi/a gi/b</dt><dd>Set a to have the contents of b.</dd>
            <dt>r/a/push ga/array gi/value</dt><dd>Append the value to array. Same as r/an/append</dd>
            <dt>r/a/append ga/array gi/value</dt><dd>Append the value or array of values to array.</dd>
            <dt>r/a/prepend ga/array gi/value</dt><dd>Prepend the value or array of values to array.</dd>
            <dt>r/n/pop ga/array</dt><dd>Get the last element of the array.</dd>
            <dt>r/n/shift ga/array</dt><dd>Get the first element of the array.</dd>
            <dt>r/a(b,n,s)/a(b,n,s)Pop a(b,n,s)/array</dt><dd>Return the array without its last element.</dd>
            <dt>r/a(b,n,s)/a(b,n,s)Shift a(b,n,s)/array</dt><dd>Return the array without its first element.</dd>
            <dt>r/n/get ga/array n/index</dt><dd>Return the value of the array at index</dd>
            <dt>r/n/count ga/array</dt><dd>Return the number of elements in the array (also the maximum index; sparse arrays are not supported)</dd>
            <dt>r/v/setElement ga/array n/index gi/value</dt><dd>Set the indexth element of the array (0-indexed) to value. If value is an array, it will replace the following elements to its length.</dd>
            <dt>r/b/contains ga/array g/value</dt><dd>Returns "true" if the array contains the specified value.</dd>
            <dt>r/a(b,n,s)/a(b,n,s)Subset a(b,n,s)/array n/start n/end</dt><dd>Return the subset of the array from start index to end.</dd>
        </dl>
    <h3>an: Number Arrays</h3>
        <p>A sequence of numbers. Starts with a ( and ends with a ). E.g. <code>( 5 6 )</code>.</p>
    <h3>ab: Boolean Arrays</h3>
        <p>A sequence of bools. Starts with a &lt; and ends with a &gt;. E.g. <code>&lt; false true &gt;</code>.</p>
    <h3>as: String Arrays</h3>
        <p>A sequence of strings. Starts with a [ and ends with a ]. E.g. <code>[ "foo" "bar" ]</code>.</p>

<h2>StageR commands</h2>
    <p>These commands are implemented in StageL by composing the basic commands for easy portability. (Sorry, not really documented yet; look in implementation/portable/*.stagel to see what's available.)</p>
    <h3>Booleans</h3>
    <h3>Numbers</h3>
        <dl>
            <dt>r/n/add n/a n/b</dt><dd>Returns the sum of two numbers a and b</dd>
            <dt>r/n/sub n/a n/b</dt><dd>Returns the difference of two numbers a and b</dd>
            <dt>r/n/mul n/a n/b</dt><dd>Returns the multiplication of two numbers a and b</dd>
            <dt>r/n/mod n/a n/b</dt><dd>Returns the modulo of two numbers a and b</dd>
        </dl>
    <h3>Strings</h3>
        <dl>
            <dt>r/s/strCharAtPos s/input n/index</dt><dd>Give the character at index bytes (=characters — no Unicode support here, sorry) into input</dd>
        </dl>
    <h3>Arrays</h3>
