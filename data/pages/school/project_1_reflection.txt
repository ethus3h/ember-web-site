====== COS225 Initial exploration report for project 1 ======

"A two page typed report identifying and summarizing in-class lectures,
text sections, and project work leading to the completion of project 1. Due
in electronic form by class on Thursday, January 23rd. The completed
project will be accepted in place of this initial report."

Object-oriented programming, on which we have been focusing so far in this course, is a programming paradigm intended to make it more possible to create clear, structured programs effectively modeling a real-world question in the software's representation of the problem it is created to solve. This category of programming design is structured around several significant concepts that set it apart from the functional or procedural programming we have mostly been studying to date. The central concept is that of the **class**, which is a definition of the shared traits and commonalities between representations of various real-world **objects**. Objects are **instances** of a class. The instances of a class share a data structure between them, and use shared common action systems, called **methods**, for the efficient execution of necessary actions common between the various instances of a class. Instances of a class share a data structure; this structure consists of possible value fields predetermined at the time of the architecture of the class: a class can specify that, for example, every one of its instances needs to record a number relating to it; then, it might provide a float or integer data type to be created when an instance is created. The creation of an object from a class is called **instantiation**, and is performed through the use of a chunk of computer code associated with the class called a **constructor**. In Java, object-oriented programming and design are central to the language.

Java, the programming language we are learning in our study of object-oriented software design, provides a number of useful data types: for example, strings, floats, doubles, and integers. However, the lack of a mutable array type can make it difficult to manage certain types of data models. Because of this, Java provides an ArrayList type, which is a structure designed to allow the addition of elements to allow expansion of a data set during program execution.

In software development, project objectives are provided to developers through **formal specifications**. In this course, we will work on a variety of projects, which will have formal specifications provided to model this tradition. Sometimes, however, it is possible for a software product to be created which matches a formal specification to the letter while not matching a human user's real-world expectations for its behavior. In a real-world context, it is important to understand the target setting and user conceptions when following a specification, rather than blindly charging ahead following directions but not matching the spirit of the expectations.

Object-oriented programming is a tool for the modeling of real-world systems during the development of software solutions. When developing a software solution focusing on a complex system, it is sometimes most efficient to break that solution down into subcomponents to be analyzed, modeled, and implemented independently, to form small parts of a greater whole. While this can improve efficiency and organization in some projects when it is applied in certain effective ways, if it is applied to excess, it could conceivably introduce inefficiency in the development of the software solution through the necessity to develop far more solutions than there are problems. Consequently, it is critical in the development of effective software systems to strike a balance between modeling a complex system with one representation structure and modeling such a system by breaking it down into individual subcomponents each representative of one portion of the real-world system being modeled.

In the process of implementing this Project 1 for the course, we will continue exploring the range of concepts related to object oriented programming and its role in the software implementation of solutions to real-world problems, and how it helps those solutions be closely related to the problems they model.

So far, I have begun implementing the Money class. Unfortunately, it is not yet functional, and while I have found solutions to some errors, the code is suffering from many other syntax errors. Hopefully I will have more success overcoming these and other errors in the near future.