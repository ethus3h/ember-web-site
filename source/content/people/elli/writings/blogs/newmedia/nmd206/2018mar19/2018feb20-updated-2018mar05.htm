<h1>Autobotography Intent—ElliotC</h1>

<!-- Originally published at http://206.nmdprojects.net/2017/autobotography-intent-elliotc/ on 2018 March 19. -->

<strong>"Musical Self"</strong>

This project will manage the development of an interactive Web environment for exploring a musician's work throughout time, letting the viewer experience the way the musician's expression evolved. It will take the form of a software application that should, given simple text files in a specified format defining data to be presented, generate a set of Web pages. Probably an entry point for such an application would be an index of one logical type of work, such as musical albums, which would be shown as a timeline, and able to be selected to explore within the album.

The generated Web pages should present the specified information in an organized and simple-to-read manner, and provide a way to experience the specified musical works in the Web browser, using HTML5 to provide streaming listening of the music. When JavaScript is available to the client Web browser, an interactive audio wave-form should be displayed that can be clicked to jump to a specified point in the audio, thereby allowing viewers to navigate the audio visually without having to memorize specific time-codes. A complete navigation system should be provided, to allow navigation within the various types of musical works specified by date, alphabetically, or visually by associated graphics (e.g. album artwork).

That way, however the viewer wants to explore, the tool for presentation would try to let them do that, and not get in the way — that would allow the media being presented (in this case, music) be presented in a way that does not distract from them. By contrast, for example, the streaming music app <em>Spotify</em> presents music somewhat visually and in a timeline, showing track lists next to album artwork, but this distracts from letting the viewer explore in whatever way they want, by enforcing specific ways of browsing — while this project would offer browsing chronologically by albums, one could also get a list of works sorted by name, with thumbnails of the associated album artwork for each work displayed next to it. The implementation of this project should be modular such that it can be trivially expanded to handle other types of media, such as text and video (the music-specific parts of the code should be separated from the general program logic).
<h2>Budget</h2>
This will probably take 75 to 150 hours of programming for a thorough, feature-complete implementation for music. Additional media types would probably not take long after that, perhaps 20 or 30 hours, if the music aspect were designed with accommodating them in mind; the main challenge with them would be implementing medium-appropriate ways to display them.
<h2>Mockups</h2>
<strong><img class="alignnone wp-image-4499 size-full" src="https://github.com/ethus3h/ember-web-site/raw/master/people/elliot/writings/blogs/newmedia/nmd206/2018mar19/mockup-2018mar19v2.png" alt="" width="100%" /></strong>

<img class="alignnone size-medium wp-image-4500" src="https://github.com/ethus3h/ember-web-site/raw/master/people/elliot/writings/blogs/newmedia/nmd206/2018mar19/mockup-2018mar19v6.png" alt="" width="100%" />
