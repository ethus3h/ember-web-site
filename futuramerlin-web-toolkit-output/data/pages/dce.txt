**DCE** is the //document-character-entity// encoding model/document structure model.

The implementation of it in Weave is [[CDCE]].

It assigns a numeric ID to every character it will encode.

DCE data represents a string of **action**s to be taken. For example, a Character action indicates that the character it represents should be appended to the relevant **output context** (e.g. a screen, a paper document, or a data stream in a different text encoding). ← I came up with the ideas in this paragraph over supper at York tonight (8 February 2014)!

DCE characters are grouped into Classes, that represent certain structures or use case groupings. These classes are not mutually exclusive, but are simply a convenient way to develop the DCE standard modularly. For example, I want to develop a [[DCBoxLayout]] or [[DCLayout]] character class corresponding to the [[Fracture Fluid|Fracture//Fluid]] box layout structure to enable the representation of flexible, semantically represented document layouts.

In the context of DCE, the term "document" is largely used in a general sense, referring not only to static documents but to, for example, documents with embedded multimedia, or interactive Application documents.

====== Brainstorming ideas: ======

DCE should have Lego Dcs — be able to represent a Lego structure using DCE. DCE should use a HTML-based administration frontend to access characters, and manage characters and mappings (add/remove/edit). Mappings need to be stored for EACH version of DCE — not just the current one —… so a method for managing separate versions of DCE would be necessary. Use a SQLite database to store DCE data? (note 13 June 2013: I think MySQL would be better suited) Could add extensions to DCE to allow storing database-style data, & then use a DCE document to store the DCE database. That would be interesting… Should have Dcs & mapping databases stored separately & by version separately to avoid accidentally modifying data from previous versions.