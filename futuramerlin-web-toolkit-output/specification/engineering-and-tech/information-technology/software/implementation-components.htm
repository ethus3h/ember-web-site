<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <link href="/simple.css" rel="stylesheet" type="text/css"> <meta content="Ember" name="author"> <meta content="width=device-width,height=device-height,user-scalable=yes" name="viewport"> <meta name="generator" content="Futuramerlin Web Toolkit 2.3.104"> <title>Information Technology Software Environment: Implementation components &mdash; Ember</title> </head> <body> <input class="nav-trigger" id="nav-trigger" type="checkbox"> <label for="nav-trigger">&nbsp;</label> <nav> <p class="logo"> <a class="nodecorate logolink" href="/">ember</a> </p> <ul> <li>Navigation:</li> <li class="nav-item nav-item-inactive"> <a href="/">Home</a> </li> <li class="nav-item nav-item-inactive"> <a href="/news">News</a> </li> <li class="nav-item nav-item-inactive"> <a href="/ancillary/ready-to-use.htm">Software</a> </li> <li class="nav-item nav-item-inactive"> <a href="/components.htm">Primary project components</a> </li> <li class="nav-item nav-item-inactive"> <a href="/people">People</a> </li> </ul> <a href="#">&#x1F51D;&#xFE0E;</a> </nav> <main> <h1>Information Technology Software Environment: Implementation components</h1> <p class="breadcrumbs">Page location: <span><a href="/components.htm">Core project components</a></span> <span><a href="/specification">Specification</a></span> <span><a href="/specification/engineering-and-tech">Engineering and Technology</a></span> <span><a href="/specification/engineering-and-tech/information-technology">Information technology</a></span> <span><a href="/specification/engineering-and-tech/information-technology/software">Information Technology Software Environment</a></span> </p> <table> <thead><tr><th>Component</th><th>Implementation language</th><th>Description</th><th>Code location</th></tr></thead> <tbody> <tr><td><a href="stagel.htm">StageL</a> transpiler</td><td>bash</td><td>Translate .stagel files to other languages</td><td>cli/stagel-convert</td></tr> <tr><td>StageL's language-specific implementations</td><td>Implemented once for each StageL target language</td><td>Implementations of routines for StageL that are not implemented in StageL itself, but are instead implemented in its target languages.</td><td>implementation/stagel-cores/</td></tr> <tr><td>Portable deterministic implementation (StageR)</td><td>StageL</td><td>This is the software that parses and runs documents stored in the EITE document format. It comprises a set of routines implementing the EITE document format. This is a batch of StageL-native routines that are available to the programs implemented in StageL (which are, collectively, this portable implementation). Should be self-contained, aside from references to the StageL language-specific implementations, and deterministic given its inputs (thus isolated from the outside world except for what is passed in to it).</td><td>implementation/portable/</td></tr> <tr><td>Optional speedup code</td><td>Optionally implemented for each StageL target language</td><td>Functions can be provided here that are optimized, native implementations of existing StageR functions. Since StageR is unoptimized lowest-common-denominator code to keep things simple, this can help things run faster. These should only be <em>equivalent</em> to already existing StageR functions, and should not provide extra features, approximate implementations (<em>e.g.</em> if floats were supported, don't provide a fast inverse square root implementation here that produces different results than the one it's overriding), entirely new code, or (usually) functions that duplicate existing StageL core-implementation code (instead, optimize those, unless it makes them really unwieldy). If a language implementation includes these, it should be tested sometimes without them to make sure they aren't inadvertently required.</td><td>implementation/speedups/</td></tr> <tr><td>Data files</td><td>N/A</td><td>Data files used to implement EITE. These should all be only accessed and available via the NDW Storage API in a location dedicated to them.</td><td>data/</td></tr> <tr><td>Build scripts</td><td>bash (dep. on StageL transpiler)</td><td>Build EITE (usually invoked by "<code>make</code>"): builds StageL libraries (StageR at implementation/portable/portable.js, and StageL's language-specific native implementations of things at implementation/core-implementations/(lang)/core.(lang)) in various languages. Also combines and copies the finished JavaScript code into web/eite.js.</td><td>support/build-scripts/</td></tr> <tr><td>EITE non-deterministic wrapper (NDW)</td><td>Various (one for each implementation)</td><td>Thin (or at least, as thin as it can be given what it has to do) wrapper that implements the public APIs for interacting with StageR in a way that can provide time-based computation, I/O, networking, semi-persistent memory access for sequences of StageR calls, local disk storage, or other things that are not purely deterministic or require persistence over time. Implementation logic should be eschewed in this, in favor of keeping it in StageR, thus reducing portability burden (<em>e.g.</em> this should not include an implementation of the node storage API; rather, a local storage API and a networking API should both be used to provide StageR with the ability to work with node storage).</td><td>implementation/platforms/</td></tr> <tr><td>EITE document testing quick-runner</td><td>For now, bash, I guess? Or maybe js and run it in node to avoid having to add new StageL target language (dep. on EITE document format implementation)</td><td>Thin wrapper around the EITE document format implementation that gets the output of a document in its state after it's finished loading, for automated testing (would ignore things that are <em>e.g.</em> interactive or whatever).</td><td>(TODO)</td></tr> <tr><td>EITE document format tests</td><td>StageL</td><td>Test suite for EITE implementation.</td><td>web/tests.htm</td></tr> <tr><td>EITE document runner</td><td>Various platforms possible. For now, HTML+JS. (dep. on EITE document format implementation)</td><td>Thin wrapper around the EITE document format implementation that runs and displays a specified document.</td><td>(TODO)</td></tr> <tr><td>EITE non-native document editing tool</td><td>HTML, JavaScript (dep. on EITE document runner)</td><td>Tool for editing and running EITE-format documents before an EITE-native editing tool is available.</td><td>web/edit.htm (WIP)</td></tr> <tr><td>EITE-native user interface and platform, including document editing tool, and optional servers for search, ad-hoc networking, encryption keys, and node data storage and synchronization (optionally, able to be a master server, storing all nodes in the network).</td><td>EITE</td><td>A user interface and document editing tool. This is what's shown in the mockups <em>e.g.</em> <a href="/people/elli/writings/blogs/elliotchandlernmd442/2017/12/06/12799819e/">here</a>. It would be used by running it using the EITE document format implementation. Thus, it could be used as the main interface to a computer, by booting directly into it. (I probably won't get it running outside of a Web browser this semester, as that's not a big priority for me right now, and it almost certainly won't be nearly as useful as mainstream operating systems or Web desktops, but I think that such capabilities would ultimately be ideal.)</td><td>web/main.htm (WIP)</td></tr> </tbody> </table> </main> </body> </html>